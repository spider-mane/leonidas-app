#!/usr/bin/env php
<?php

use Laravel\Prompts\TextPrompt;
use WebTheory\Erector\Action\AutoloadDumper;
use WebTheory\Erector\Action\DirectoryKeeper;
use WebTheory\Erector\Action\FileCopier;
use WebTheory\Erector\Action\FilenameChanger;
use WebTheory\Erector\Action\FileRemover;
use WebTheory\Erector\Action\FileTransformer;
use WebTheory\Erector\Action\GitInitiator;
use WebTheory\Erector\Action\Message;
use WebTheory\Erector\BaseResolver;
use WebTheory\Erector\Builder;
use WebTheory\Erector\CallableReplacements;
use WebTheory\Erector\LaravelPrompt;
use WebTheory\Erector\Transformation\JsonMerger;
use WebTheory\Erector\Transformation\TextReplacer;

$root = dirname(__DIR__, 1);

require_once $root . '/tests/bootstrap.php';

################################################################################
# Prompt
################################################################################

// allow defaults to be passed to script for testing
$appName = $appName ?? strtolower(preg_replace('/[^A-Za-z0-9-]+/', '-', basename($root)));
$authorName = $authorName ?? trim(shell_exec('git config user.name'));
$authorEmail = $authorEmail ?? trim(shell_exec('git config user.email'));

$appTitle = $appTitle ?? 'Application';
$appDescription = $appDescription ?? 'Custom WordPress application for ';
$authorGithub = $authorGithub ?? '';
$appVersion = $appVersion ?? '0.1.0';
$psr4Namespace = $psr4Namespace ?? '';

$fields =  [
  // app
  'app_title' => new TextPrompt(
    label: 'App title',
    placeholder: 'Application Title',
    default: $appTitle
  ),
  'app_name' => new TextPrompt(
    label: 'App name',
    placeholder: 'application-name',
    default: $appName
  ),
  'app_version' => new TextPrompt(
    label: 'App version',
    placeholder: '0.1.0',
    default: $appVersion
  ),
  'app_description' => new TextPrompt(
    label: 'App description',
    placeholder: '0.1.0',
    default: $appDescription
  ),
  'app_documentation' => new TextPrompt(
    label: 'App documentation',
    placeholder: '',
    default: 'https://github.com/{vendor_github}/{app_name}'
  ),

  // author
  'author_name' => new TextPrompt(
    label: 'Author name',
    placeholder: '',
    default: $authorName
  ),
  'author_email' => new TextPrompt(
    label: 'Author email address',
    placeholder: '',
    default: $authorEmail
  ),
  'author_github' => new TextPrompt(
    label: 'Author Github username',
    placeholder: '<username> in https://github.com/username',
    default: $authorGithub
  ),
  'author_website' => new TextPrompt(
    label: 'Author website',
    placeholder: '',
    default: 'https://github.com/{author_github}'
  ),

  // vendor
  'vendor_name' => new TextPrompt(
    label: 'Vendor name',
    placeholder: '',
    default: '{author_github}'
  ),
  'vendor_github' => new TextPrompt(
    label: 'Vendor Github username',
    placeholder: '<username> in https://github.com/username',
    default: '{vendor_name}'
  ),
  'vendor_website' => new TextPrompt(
    label: 'Vendor website',
    placeholder: '',
    default: 'https://github.com/{vendor_name}'
  ),
];

$consent = 'Modify files with these values and create new git repository?';

################################################################################
# Configurations
################################################################################

$stubDirname = '__prefill__';
$replacementsDirname = '@replacements';

$stubs = $root . '/' . $stubDirname;
$replacements = $stubs . '/' . $replacementsDirname;

$updates = [
  # plaintext
  'pseudo-app' => 'app_name',
  'leonidas-app' => 'app_name',

  # placeholders
  ':app_title' => 'app_title',
  ':app_name' => 'app_name',
  ':app_version' => 'app_version',
  ':app_description' => 'app_description',
  ':app_documentation' => 'app_documentation',
  ':author_name' => 'author_name',
  ':author_email' => 'author_email',
  ':author_github' => 'author_github',
  ':author_website' => 'author_website',
  ':vendor_name' => 'vendor_name',
  ':vendor_github' => 'vendor_github',
  ':vendor_website' => 'vendor_website',
  ':system_year' => fn () => date('Y'),
];

// files to transform
$boilerplate = array_merge(
  // files
  array_map(fn ($file) => $root . $file, [
    // app
    '/public/app/mu-plugins/app.php',

    // bin
    '/bin/apprun',
    '/bin/enterapp',

    // docker
    '/.devcontainer/devcontainer.json',
    '/docker-compose.override.example.yml',
    '/docker/php/Dockerfile',

    // misc
    '/.php-cs-fixer.dist.php',
    '/phpcs.xml.dist',
    '/phpunit.xml.dist',
    '/wp-cli.yml',
  ]),

  // stubs
  ...array_map(fn ($file) => glob($stubs . $file . '/*'), [
    '/' . $replacementsDirname,
  ]),

  // globs
  ...array_map(fn ($file) => glob($root . $file), [
    // php
    '/app/*.php',
    '/app/**/*.php',
    '/app/**/**/*.php',
    '/app/**/**/**/*.php',
    '/boot/*.php',
    '/config/*.php',
    '/tests/**/*.php',
    '/tests/**/**/*.php',
  ]),
);

// files whose output target does not correspond to its own relative path
$locations = [
  'app.json' => 'assets',
];

// files where user input needs to be further refined
$filters = [
  $root . '/config/app.php' => function ($values) {
    $values['theme_description'] = addslashes($values['theme_description']);

    return $values;
  }
];

// json files whose contents should be merged with a functional counterpart
$json = [
  'composer.json' => function (array $base, array $stub): array {
    $composer = array_replace_recursive($base, $stub);

    $composer['authors'] = $stub['authors'];

    $scripts = $composer['scripts'];

    unset(
      $composer['type'],
      $composer['keywords'],
      $scripts['post-create-project-cmd'],
      $scripts['fill']
    );

    $composer['scripts'] = $scripts;

    return $composer;
  },
  'assets/app.json' => function (array $base, array $stub): array {
    $app = array_replace_recursive($base, $stub);

    return $app;
  },
];

// files to rename
$rename = [
  '.stub.gitattributes' => fn () => '.gitattributes',
  'assets/.stub.gitattributes' => fn () => '.gitattributes',
];

// files to copy to root directory
$copy = [];

// files to delete
$remove = [
  $stubDirname,
  'bin/composer-prefill',
  'bin/prefill',
  'bin/testprefill',
  'bin/testproject',
  'bin/.gitattributes',
  'prefill',
];

$keep = [
  'bin',
];

$message = "Done! \e[1;37;44m#StandWith\e\e[0;30;43mUkraine\e[0m\n";

################################################################################
# Process
################################################################################

$updates = new CallableReplacements($updates);
$baseResolver = new BaseResolver($locations, $root, $replacements);

$builder = new Builder(
  new GitInitiator(),
  new FileTransformer(
    $boilerplate,
    $filters,
    $baseResolver,
    new TextReplacer($updates),
    new JsonMerger($root, $json),
  ),
  new FilenameChanger(new CallableReplacements($rename)),
  new AutoloadDumper(),
  new FileRemover(...$remove),
  new FileCopier(...$copy),
  new DirectoryKeeper(...$keep),
  new Message($message)
);

$builder->build($root, new LaravelPrompt($fields, $consent));
